function [topt, stimulus, midopt, mechopt, mnaopt] = defaults(args, signal_flag, plotopt)
%DEFAULTS

%% Tspan and stimulus options

switch signal_flag
    case 'defined'
        topt = args.topt;
        stimulus = args.stimulus;
        assert(~isempty(topt))
        assert(~isempty(stimulus))

    case 'fun'
        stimulus = args.stimulus_fun;
        topt = [];
        assert(~isempty(stimulus))

    case 'multiple'

        stimulus = @(CONF) ...
        devopts.stimulus(args.GlobalSamplingFrequency, args.tf_extra, ...
            'strict_signal_length', args.strict_signal_length, ...
            't0', args.t0, ...
            'onset', args.onset, ...
            'offset', args.offset, ...
            'zeroDuration', args.zeroDuration, ...
            'fadeDuration', args.fadeDuration, ...
            'special', args.special_signal, ...
            'signal_file', args.signal_file, ...
            'signal_var', args.signal_var, ...
            'waveform', args.waveform, ...
            'amplitude_unit', args.amplitude_unit, ...
            'amplitude', CONF.Amplitude, ...
            'frequency', CONF.Frequency);

        topt = [];

    case 'single'
    
        if numel(args.Frequency) && args.special_signal ~= "chirp" % sum multiple signals
            for i = 1:numel(args.Frequency)
                if numel(args.Frequency) > 1
                    args.strict_signal_length = true;
                end
                [topt, stimulus(i)] = devopts.stimulus(args.GlobalSamplingFrequency, args.tf_extra, ...
                        'strict_signal_length', args.strict_signal_length, ...
                        't0', args.t0, ...
                        'onset', args.onset, ...
                        'offset', args.offset, ...
                        'zeroDuration', args.zeroDuration, ...
                        'fadeDuration', args.fadeDuration, ...
                        'special', args.special_signal, ...
                        'signal_file', args.signal_file, ...
                        'signal_var', args.signal_var, ...
                        'waveform', args.waveform, ...
                        'amplitude_unit', args.amplitude_unit, ...
                        'amplitude', args.Amplitude(i), ...
                        'frequency', args.Frequency(i));
            end
            if numel(stimulus) > 1
                stimulus = CompoundSignal(stimulus);
            end
        else
            [topt, stimulus] = devopts.stimulus(args.GlobalSamplingFrequency, args.tf_extra, ...
                    'strict_signal_length', args.strict_signal_length, ...
                    't0', args.t0, ...
                    'onset', args.onset, ...
                    'offset', args.offset, ...
                    'zeroDuration', args.zeroDuration, ...
                    'fadeDuration', args.fadeDuration, ...
                    'special', args.special_signal, ...
                    'signal_file', args.signal_file, ...
                    'signal_var', args.signal_var, ...
                    'waveform', args.waveform, ...
                    'amplitude_unit', args.amplitude_unit, ...
                    'amplitude', args.Amplitude, ...
                    'frequency', args.Frequency);
        end
end

%% Outer & Middle ears, Cochlear mechanics

if nargout > 2
    [midopt, mechopt] = devopts.mech(args.GlobalSamplingFrequency, ...
        'Numstacks', args.Numstacks, ...
        'opt_ver', args.opt_ver, ...
        'amplifier', args.ohc_amplifier, ...
        'gain_factor', args.gain_factor, ...
        'noise_damage', args.noise_damage, ...
        'noise_damage_f0', args.noise_damage_f0, ...
        'oe_identifier', args.oe_identifier, ...
        'me_identifier', args.me_identifier, ...
        'plotopt', plotopt);

end
%% OC electric

if nargout > 4
    [mnaopt] = devopts.ocelectric(args.GlobalSamplingFrequency, ...
        'Numstacks', args.Numstacks, ...
        'mna_ver', args.mna_ver, ...
        'plotopt', plotopt);

end
end
