function [VARIABLES] = Variables(variables, mnaopt)
%VARIABLES 

% VALSWITCHES = { ...
%     'absolute', ...
%     'relative', ...
%     };
% 
% VARIABLES = [ ...
%     ...struct( ...
%         ...'name', 'current', ...
%         ...'displayname', 'current', ...
%         ...'math', 'I', ...
%         ...'subvariable', { ...
%     ...        'IHC'} ...
%             ...'OHC'} ...
%             ...'OHC_MET'} ...
%     ...        ...'IHC', 'OHC'} ...
%     ...        ...'IHC', 'OHC', 'SV'} ...
%     ...), ...
%     struct( ...
%         'name', 'voltage', ...
%         'displayname', 'voltage', ...
%         'math', 'U', ...
%         'subvariable', { ...
%             'IHC'} ...
%             ...'OHC'} ...
%             ...'IHC', 'OHC'} ...
%             ...'IHC_ic', 'IHC_ec', 'OHC_ic', 'OHC_ec', 'SM', 'SL'} ...
%         )...
%     ];

% VALSWITCHES = { ...
%     'absolute', ...
%     ...'relative', ...
%     };

VARIABLES = [];

%% Mechanical Variables

% BM displcement
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'displacement', ...
        'displayname', 'displacement', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'nm', ...
        'math', '\xi', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'BMx', ...
        'fun', @(i, j, group) ...
            variables.(group){i,j}.result_files.fMech.BMx ...
        )];

% BM velocity
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'velocity', ...
        'displayname', 'velocity', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'nm/s', ...
        'math', 'd\xi', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'BMv', ...
        'fun', @(i, j, group) ...
            variables.(group){i,j}.result_files.fMech.BMv ...
        )];

% TM displcement
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'displacement', ...
        'displayname', 'displacement', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'nm', ...
        'math', '\eta', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'TMx', ...
        'fun', @(i, j, group) ...
            variables.(group){i,j}.result_files.fMech.BMx ...
        )];
    
% TM velocity
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'velocity', ...
        'displayname', 'velocity', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'nm/s', ...
        'math', 'd\eta', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'TMv', ...
        'fun', @(i, j, group) ...
            variables.(group){i,j}.result_files.fMech.TMv ...
        )];

%% Voltages
    
% volt OHC relative
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'voltage', ...
        'displayname', 'voltage', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'mV', ...
        'math', 'U', ...
        'switch', 'relative', ...
        'do_plot', 0, ...
        'subvariable', 'OHC', ...
        'fun', @(i, j, group) getVoltage( ....
            variables.(group){i,j}.result_files.fVolt, ...
            'OHC', mnaopt, 'transformed') ...
        )];

% volt OHC absolute
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'voltage', ...
        'displayname', 'voltage', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'mV', ...
        'math', 'U', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'OHC', ...
        'fun', @(i, j, group) getVoltage( ....
            variables.(group){i,j}.result_files.fVolt, ...
            'OHC', mnaopt, 'transformed') ...
        )];

% volt IHC relative
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'voltage', ...
        'displayname', 'voltage', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'mV', ...
        'math', 'U', ...
        'switch', 'relative', ...
        'do_plot', 1, ...
        'subvariable', 'IHC', ...
        'fun', @(i, j, group) getVoltage( ....
            variables.(group){i,j}.result_files.fVolt, ...
            'IHC', mnaopt, 'transformed') ...
        )];
    
% volt IHC absolute
VARIABLES = [ VARIABLES, ...
    struct( ...
        'name', 'voltage', ...
        'displayname', 'voltage', ...
        'description', '', ...
        'comment', '', ...
        'unit', 'mV', ...
        'math', 'U', ...
        'switch', 'absolute', ...
        'do_plot', 0, ...
        'subvariable', 'IHC', ...
        'fun', @(i, j, group) getVoltage( ....
            variables.(group){i,j}.result_files.fVolt, ...
            'IHC', mnaopt, 'transformed') ...
        )];

%% Add some properties automatically

for i = 1:numel(VARIABLES)
    
    VARIABLES(i).id = sprintf('%s_%s_%s', ...
        VARIABLES(i).switch, VARIABLES(i).subvariable, VARIABLES(i).name);
    
    VARIABLES(i).disp_name = sprintf('%s %s %s', ...
        VARIABLES(i).switch, VARIABLES(i).subvariable, VARIABLES(i).name);
end    
    
end

