function [channels] = BasolateralChannelsIHC(version, plotflag)
arguments
    version (1,:) char
    plotflag (1,1) logical = false
end


switch version

    case {'LopezPoveda_2006', 'LopezPoveda_2006_Johnson_2015'}
        % Parameters from Lopez-Poveda and Eustaquio-Martin 2006

        % IHC mechanical conductance parameters
        % Gl = 0.33e-9;                  % Apical leakege conductance
        % gmax = 9.45e-9;                % Apical conductance with all channels fully open (to determine the apical mechanical conductance) [S]
        % s0 = [63.1 12.7].*1e-9;        % Displacement sensitivity (1/m)
        % u0 = [52.7 29.4].*1e-9;        % Displacement offset (m)

        % Et = 100e-3;       		     % Endococlear potential [V] (Kros and Crawford value)
        % Ekf = -78e-3;				     % Revelsal potential [V]
        % Eks = -75e-3;				     % Revelsal potential [V]

        % Ca = 0.895e-12;	             % Apical capacitance
        % Cb = 8e-12;                    % Basal capacitance

        % Rp = 0.01;                     % Shamma epithelium resistance
        % Rt = 0.24;                     % Shamma epithelium resistance

        % MODIFICATIONS:        
        % our gmax_MET = approx. 29.6 nS
        %   => we will increase the G by the same factor        
        % FAC = 29.6 / 9.45 = 3.13
        switch version
            case 'LopezPoveda_2006'
                FAC = 3.13;
                FAC = 1;
            case 'LopezPoveda_2006_Johnson_2015'                
                FAC = 3.13;
                FAC = 1;
        end
        % FAC = 10;
        % FAC = 1/2;
        % FAC = 0.1;

        fast_channel = struct( ...
            'version', 'LopezPoveda_2006', ...
            'name', 'IHC_fast', ...
            'var_name', 'popen_IHC_fast', ...
            'index', NaN, ...
            'order', 2, ...                % order of the ODE
            'voltage', 'IHC', ...
            ...
            'parameters', struct( ...
                'G',    FAC*30.7262e-9, ...	   % Maximum conductance of fast channel
                'V1',  -43.2029e-3, ...        % Half-activation setpoint of fast channel
                'S1',   11.9939e-3, ...	       % Voltage sensitivity constant of fast channel
                'V2',  -64.4e-3, ...           % Half-activation setpoint of fast channel
                'S2',    9.6e-3, ...		   % Voltage sensitivity constant of fast channel
                ...
                'T1min', 0.10e-3, ...
                'T1max', 0.33e-3, ...
                'aT1',  31.25e-3, ...
                'bT1',   5.42e-3, ...
                ...
                'T2min', 0.09e-3, ...
                'T2max', 0.10e-3, ...
                'aT2',   1e-3, ...
                'bT2',   1e-3));


        slow_channel = struct( ...
            'version', 'LopezPoveda_2006', ...
            'name', 'IHC_slow', ...
            'var_name', 'popen_IHC_slow', ...
            'index', NaN, ...
            'order', 2, ...                % order of the ODE
            'voltage', 'IHC', ...
            ...
            'parameters', struct( ...
                'G',    FAC*28.7102e-9, ...        % Maximum conductance of slow channel
                'V1',  -52.2228e-3, ...        % Half-activation setpoint of slow channel
                'S1',   12.6626e-3, ...        % Voltage sensitivity constant of slow channel
                'V2',  -85.2228e-3, ...        % Half-activation setpoint of slow channel
                'S2',   16.9e-3, ...		   % Voltage sensitivity constant of slow channel
                ...
                'T1min', 1.30e-3, ...
                'T1max', 9.90e-3, ...
                'aT1',  15.27e-3, ...
                'bT1',   7.27e-3, ...
                ...
                'T2min', 0.01e-3, ...
                'T2max', 4.27e-3, ...
                'aT2',  48.20e-3, ...
                'bT2',   8.72e-3));

        % channels = [ fast_channel ];
        % channels = [ fast_channel, fast_channel ];
        channels = [ fast_channel, slow_channel ];
        
        if plotflag
            hfig = figure;
            hold on
            V = linspace(-100e-3, 0e-3, 200);
            for i = 1:numel(channels)
                plot(V*1e3, Oinf_2s(channels(i).parameters, V), 'DisplayName', channels(i).name)
            end
            legend()
            xlabel('IHC voltage (mV)')
            ylabel('pOpen inf')
        end
        
    case {'Dierich_2020'}
        
        Cm = 9.8e-12;
        load('Dierich_2020_curr_par.mat', ...
            'GK74', 'GKf', 'GKn','GKv11','GKv12','GKv18','SK11','SK12', ...
            'SK18', 'SK74', 'SKf', 'SKn', 'Xk11', 'Xk12', 'Xk18', 'Xk74', ...
            'Xkf', 'Xkn', 'tauK11', 'tauK12', 'tauK18', 'tauKf', 'tauKn');
        
        fac = Cm/1e-12; % ??? % from their model
        
        tauK74 = tauKn;
        
        channels = [ ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_Kf', ...
                'var_name', 'popen_IHC_Kf', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GKf*fac, ...
                    'V',   Xkf, ...
                    'S',   SKf, ...
                    'tau', tauKf)), ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_K11', ...
                'var_name', 'popen_IHC_K11', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GKv11*fac, ...
                    'V',   Xk11, ...
                    'S',   SK11, ...
                    'tau', tauK11)), ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_K12', ...
                'var_name', 'popen_IHC_K12', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GKv12*fac, ...
                    'V',   Xk12, ...
                    'S',   SK12, ...
                    'tau', tauK12)), ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_K18', ...
                'var_name', 'popen_IHC_K18', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GKv18*fac, ...
                    'V',   Xk18, ...
                    'S',   SK18, ...
                    'tau', tauK18)), ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_K74', ...
                'var_name', 'popen_IHC_K74', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GK74*fac, ...
                    'V',   Xk74, ...
                    'S',   SK74, ...
                    'tau', tauK74)), ...
            struct( ...
                'version', 'Dierich_2020', ...
                'name', 'IHC_Kn', ...
                'var_name', 'popen_IHC_Kn', ...
                'index', NaN, ...
                'order', 1, ...                % order of the ODE
                'voltage', 'IHC', ...
                ...
                'parameters', struct( ...
                    'G',    GKn*fac, ...
                    'V',   Xkn, ...
                    'S',   SKn, ...
                    'tau', tauKn))];
        
end

    function Oinf = Oinf_2s(params, V)
        
        Oinf = 1./(1 + exp((params.V1 - V)/params.S1) .* (1 + exp((params.V2 - V)/params.S2)));
        
    end


end