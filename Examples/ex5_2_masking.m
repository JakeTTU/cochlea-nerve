% This example generates masker-probe signals and calculates the response
% of the auditory nerve to these signals. The masker-probe signals are
% generated with different masker durations and delays. The response of the
% auditory nerve is calculated for each masker-probe signal. The response
% is then analyzed to obtain the EPSC and AP response to the probe signal.

% THe whole script takes a long time to run. It is recommended to run it
% with a large number of cores (e.g. 36) and to run it on a cluster. When
% experimenting with the synapse parameters, it will reuse the results of
% the previous calculations, so it is not necessary to recalculate the
% mechanical and electrical responses of the cochlea.

ncpus = 8;
% ncpus = 3;

fiber_properties = fiber_properties_0522();

fiber_properties = [ ...
    fiber_properties.test_6
    ...fiber_properties.test_6_n4
    ...fiber_properties.test_12
    ...fiber_properties.test_12_n4
    ];

%%
global_opts = { ...
    'debug', true, ...
    'mna_ver', 'dev2', ...
    'Numstacks', 300, ...
    'oe_identifier', 'none', ...
    ...'oe_identifier', 'Meddis', ...
    'me_identifier', 'none', ...
    ...'me_identifier', 'PBLL', ...
    };

%%

% DOI: 10.1152/jn.1979.42.4.1083

% DELAY = [0, 1, 2, 5, 10, 20, 50, 100, 150, +Inf];
DELAY = [0, 1, 2, 5, 10, 20, 50, 100, 150, +Inf];
% DELAY = unique([DELAY, logspace(log10(1), log10(200), 12)]);
% DELAY = DELAY(1:end-1);
% DELAY = [1, 2, 5, 10, 20];

MASKER_DURATION = [2, 5, 10, 50, 100, 200];
% MASKER_DURATION = [2, 5];

thr = 30;
num_replicas = 10;
F = 2500;

stim_generator = @(Conf) masker_probe_signal( ...
    masker_frequency=F, ...
    probe_frequency=F, ...
    masker_duration=Time(Conf.masker_duration - 1, 'ms'), ... % -1 to be same as in the exp paper (see fig.2 onset/offset)
    probe_duration=Time(15 - 1, 'ms'), ... % -1 to be same as in the exp paper (see fig.2 onset/offset)
    masker_ampl_re_thr=30, ...
    probe_ampl_re_thr=20, ...
    thr=thr, ...
    delay=Time(Conf.delay, 'ms'));

%%

DELAY_MASKER = DELAY(1:end-1); % without +Inf
DELAY_NO_MASKER = DELAY(end); % +Inf

signal_poduct_args = { ...
    'masker_duration', MASKER_DURATION, ...
    'delay', DELAY};

signal_poduct_args_masker = { ...
    'masker_duration', MASKER_DURATION, ...
    'delay', DELAY_MASKER};

signal_poduct_args_no_masker = { ...
    'masker_duration', NaN, ...
    'delay', DELAY_NO_MASKER};

[Signal_Configurations, Signal_Conf_nums, Signal_Conf_info] = ParameterProduct( ...
        signal_poduct_args{:});


product_args = [ ...
    signal_poduct_args, ...
    { ...
        'fiber_properties', fiber_properties, ...
    }];

%% Plot signals

PLOT_SIGNALS = true;
% PLOT_SIGNALS = false;

if PLOT_SIGNALS
    figure();
    hold on
    for j = 1:numel(Signal_Configurations)    
        Conf = Signal_Configurations(j);
        [topt, stimulus] = stim_generator(Conf);
        env = stimulus.envelope_fcn('ms');
        A = 10^(stimulus.amplitude/20);
        plot(stimulus.audiotime.ms, A * env(stimulus.audiotime.ms))
    end
end

%% Calculate

CALCULATE = true;
% CALCULATE = false;

if CALCULATE
    if false
        % do_recalculate = {'synapse', 'nerve'};
        do_recalculate = {};
    else
        do_recalculate = {};
        % do_recalculate = {'oc_mna_statistics'};
        % do_recalculate = {'ant_postprocess'};
    end

    DELAY_MASKER = DELAY(1:end-1); % without +Inf

    if 1
        if true
            delete(gcp('nocreate'))
            parpool('Processes', ncpus)
        end

        MNA_run_multi(...
            global_opts{:}, ...
            parallel=true, ...
            ...parallel=false, ...
            do_recalculate=do_recalculate, ...
            stimulus_fun=stim_generator, ...
            product_args=signal_poduct_args_masker, ...
            sim_groups={'active'}, ...
            gain_factor=1.0)

        MNA_run_multi(...
            global_opts{:}, ...
            parallel=true, ...
            ...parallel=false, ...
            do_recalculate=do_recalculate, ...
            stimulus_fun=stim_generator, ...
            product_args=signal_poduct_args_no_masker, ...
            sim_groups={'active'}, ...
            gain_factor=1.0)

    end
    
    Signal_Configurations_masker = ParameterProduct( ...
        signal_poduct_args_masker{:});

    Signal_Configurations_no_masker = ParameterProduct( ...
        signal_poduct_args_no_masker{:});

    CONF = [Signal_Configurations_masker, Signal_Configurations_no_masker];

    t = tic();

    if 1
    for j = 1:numel(CONF)

        Conf = CONF(j);

        [topt, stimulus] = stim_generator(Conf);
    
        % CALCULATE / VERIFY WE HAVE IC (serial)
        oneANTjob(...
            global_opts{:}, ...
            do_plot={'none'}, ...
            ...parallel=true, ...
            parallel=false, ...
            ...do_recalculate={'ant_postprocess'}, ...
            do_recalculate=do_recalculate, ...
            parallel_switch='one_job', ...
            ant_fun='ANT', ...
            ant_ver='v4', ...
            fiber_properties=fiber_properties, ...
            ...
            calculate_only_ant_IC=true, ...
            num_replicas=0, ...
            ...
            hh_method='cw', ...
            slices={'max_std_new'}, ...
            ...mna_ver='dev_v0e', ...
            stimulus=stimulus, ...
            topt=topt, ...
            gain_factor=1.0)
        
        % CALCULATE REPLICAS (parallel)
        oneANTjob(...
            global_opts{:}, ...
            do_plot={'none'}, ...
            parallel=true, ...
            ...parallel=false, ...
            ...do_recalculate={'ant_postprocess'}, ...
            do_recalculate=do_recalculate, ...
            parallel_switch='one_job', ...
            ant_fun='ANT', ...
            ant_ver='v4', ...
            fiber_properties=fiber_properties, ...
            num_replicas=num_replicas, ...
            hh_method='cw', ...
            slices={'max_std_new'}, ...
            stimulus=stimulus, ...
            topt=topt, ...
            gain_factor=1.0)

        done_frac = j / numel(CONF);
        time_expected = (1-done_frac)*toc(t)/(done_frac);
        dbprintf('MAIN LOOP %d/%d, %s expected\n', j, numel(CONF), disp_toc(time_expected))
    end

    end
end


%%

kwargs = {'no_create_only_load', false};
% kwargs = {'no_create_only_load', true};

% plot_vars = {'EPSC_full'};
% plot_vars = {'EPSC_full', 'EPSC_onset_20ms'};
% plot_vars = {'EPSC_onset_20ms'};
% plot_vars = {'EPSC', 'EPSC_full', 'EPSC_onset_20ms'};
% plot_vars = {'CaConc'};
% plot_vars = {'EPSC_full', 'EPSC', 'CaConc', 'NTRate'};
% plot_vars = {'EPSC_full'};
% plot_vars = {'NTRate'};
% plot_vars = {'AP_full', 'EPSC_full'};
plot_vars = {'AP'};
% plot_vars = {'AP', 'EPSC'};
% postprocess_windows = {'main', 'onset_20ms', 'offset_20ms', 'ss_zero', 'ss_end_50ms', 'full'};
postprocess_windows = {'full'};
% postprocess_windows = {'full', 'main'};

if ~exist('cache', 'var')
    cache = struct();
end

for i = 1:numel(plot_vars)
for j = 1:numel(postprocess_windows)
    plot_var = plot_vars{i};

    postprocess_window = postprocess_windows{j};

    id_ext = sprintf('%s_%s', plot_var, postprocess_window);

    if isfield(cache, id_ext) && ~isempty(cache.(id_ext))
        cached_analysis = true;
    else
        cached_analysis = false;
        cache.(id_ext) = [];
    end

    do_recalculate={};
    % do_recalculate={'ant_postprocess'}; % TOO MUCH MEMORY WHEN PARALLEL

    [analysis_variables.(id_ext), cache.(id_ext)] = ANT_run_multi( ...
        global_opts{:}, ...
        kwargs{:}, ...
        ...GlobalSamplingFrequency=Frequency(100, 'kHz'), ...
        ...force_num_cores=36, ...
        ...analysis_compare_to=analysis_variables_electric_old, ...
        analysis_plot_variables={plot_var}, ...
        postprocess_window=postprocess_window, ...
        parallel=true, ...
        ...parallel=false, ...
        do_recalculate=do_recalculate, ...
        Numstacks=300, ...
        ...
        stimulus_fun=stim_generator, ...
        product_args=product_args, ...
        ...
        do_override=struct(...
            'hist_over_signal_masking_4', true ...
        ), ...
        ...
        fiber_properties=fiber_properties, ...
        num_replicas=num_replicas, ...
        ...num_replicas=14, ...
        cached_analysis=cached_analysis, ...
        cache=cache.(id_ext), ...
        ...no_create_only_load=~isAurum(), ...
        ...no_create_only_load=false, ...
        no_create_only_load=true, ...
        ...no_create_only_load_oc_mna=false, ...
        no_create_only_load_oc_mna=true, ...
        ohc_amplifier='electric', ...
        opt_ver='latest', ...
        ant_ver='v4');
    
end
end

