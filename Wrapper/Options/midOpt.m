classdef midOpt < Opt
    properties (Constant)
        % units
        % si: F * V / s + S * V = A
        %     uF * mV / ms + mS * mV = uA

        % si: H * A / s + V = V
        %     H * uA / ms + mV = mV
        default_simulation_units = struct( ...
            'time', 's', ...
            'voltage', 'V', ...
            'current', 'A', ...
            'conductance', 'S', ...
            'inductance', 'H', ...
            'capacitance', 'F');
%         default_simulation_units = struct( ...
%             'time', 'ms', ...
%             'voltage', 'mV', ...
%             'current', 'uA', ...
%             'conductance', 'mS', ...
%             'inductance', 'H', ...
%             'capacitance', 'uF');
    end
    properties                            
        circuit
        pv_TM   % pressure to voltage at tympanic membrane
        simulation_units
        
        IND
        
        % numerical solution parameters
        ode_reltol (1,1) double = 1e-9
        
        ode_maxstep     (1,1) Time = Time(1e-2, 'ms');
        ode_initialstep (1,1) Time = Time(1e-4, 'ms');
    end
    properties (Dependent)
    end
    properties (Constant)
    end
    properties (Hidden)
        definingProperties = { ...
            'ode_maxstep', ...
            'circuit', ...
            'pv_TM', ...
            'simulation_units', ...
            }
    end
    properties (Constant, Hidden)
        requiredParameters = {'circuit', 'pv_TM'};
    end
    methods (Static)
        function midopt = simple_init(version)
            
            su = midOpt.default_simulation_units;
            
            switch version
                case 'dev'
                    updated_parameters = struct( ...
                        'Rcm', 0.002937171395014418, ...
                        'La', 0.007821011726873243, ...
                        'Ra',   0.1781859541682067, ...
                        'Rti1', 0.005717623809642999, ...
                        'Cti1', 3.665604886531633e-06, ...
                        'Cti2', 2.331753061471045e-07, ...
                        'Rti2',  0.01816201912960247, ...
                        'Rti3', 0.0001154419087022123, ...
                        'Lti',    0.015563307309665, ...
                        'Cti3', 5.180209724606197e-07, ...
                        'Cte', 9.019459088027458e-07, ...
                        'Lte',  0.04823092240082723, ...
                        'Rte',  0.02716531759951024, ...
                        'Cis', 4.61959539247965e-08, ...
                        'Ris',  0.04427903532306574, ...
                        'Cst', 1.823021558987398e-06, ...
                        'Rla',   0.0162895857659625, ...
                        'Cla', 3.991813402702068e-07, ...
                        'Rh', 0.001136017714952076, ...
                        'Lh',  0.02150377270840547, ...
                        'Ccp', 4.694955211672143e-06 ...
                    );
                    
                    circuit = ME_circuit_PBLL(su, ...
                        'UpdatedParameters', updated_parameters);
                    IND = 17;
                case 'PBLL'
                    circuit = ME_circuit_PBLL(su);
                    IND = 17;
                case 'Zwislocki'
                    circuit = ME_circuit_Zwislocki(su);
                    IND = 11;
            end
            
            midopt = midOpt( ...
                'circuit', circuit, ...
                ...'pv_TM', 5e5, ...
                'pv_TM', 1e6, ...
                'simulation_units', su, ...
                'IND', IND);
        end
    end
    methods
        % =================================================================
        % SET FUNCTIONS FOR PARAMETERS
        % -----------------------------------------------------------------
        %
        
        % -----------------------------------------------------------------
        % =================================================================
        
        % =================================================================
        % GET FUNCTIONS FOR PARAMETERS
        % -----------------------------------------------------------------
        %
        
        % -----------------------------------------------------------------
        % =================================================================
        
        
        function obj = midOpt(varargin)
            
            % gather name-value pair input arguments
            opt = struct(varargin{:});
            
            % check if all required properties are set
            obj.checkRequired(opt);
            
            % assign the struct values to the object
            obj.expandProperties(opt);
            
        end
    end


end
