function oneANTjob(varargin)
arguments (Repeating)
    varargin
end
arguments
end

args = struct();

[args, opt, memopt, paropt] = common_opts(args, varargin{:});

%% Plotting options

plotopt = plotOpt('LCRB', ...
            ...
            'default_plt_action', false, ...
            'interactive_selection', true, ...
            ...
            ...'subplot', 0);
            'subplot', true);

%% Default options

if ~isempty(args.stimulus) && ~isempty(args.topt)
    [topt, stimulus, midopt, mechopt, mnaopt] = devopts.defaults(args, 'defined', plotopt);
else
    [topt, stimulus, midopt, mechopt, mnaopt] = devopts.defaults(args, 'single', plotopt);
end


%% Run options
runopt = runOpt( ...
    'analysisStart', stimulus.default_analysis_start_time, ...
    'CodeVersion', codeVersion(), ...
    'calculate_only_ant_IC', args.calculate_only_ant_IC, ...
    'Debug', false, ...
    'ReconstructResults', true, ...true, ...
    'draw_gui', false, ...
    'save_figures', false, ...
    ...'SRsToPlot', {{'H1'}}, ... % must be as double cell {{}}
    'SRsToPlot', {{'all'}}, ... % must be as double cell {{}}
    ...'analysisStart', analysis_start, ... % analysis must start long enough after starting instabilities
    'waitbarFunctionAvailable', false, ... % disable waitbar
    'verbose', 3 );

% verbose levels:   0 ... just matlab errors & warnings
%                   1 ... low verbosity
%                   2 ... normal verbosity
%                   3 ... high verbosity

if args.purge == true
    runopt.purge = 'electrical';
end

runopt.no_create_only_load_oc_mna = args.no_create_only_load_oc_mna;
% runopt.no_create_only_load = args.no_create_only_load;

% default action for do is TRUE
if isempty(args.skip_do)
    skip_do = { ...
        ...'mech', ...
        ...'oc_mna', ...
        ...'synapse', ...
        ...'nerve', ...
        ...'ant_postprocess' ...
        };
else
    skip_do = args.skip_do;
end

% default action for recalculate is FALSE
if isempty(args.do_recalculate)
    do_recalculate = { ...
        ...'mid', ...
        ...'mech', ...
        ...'mech_statistics', ...
        ...'oc_mna_circuit_ic', ...
        ...'oc_mna_dae_ic', ...
        ...'oc_mna', ...
        ...'oc_mna_statistics', ...
        ...'synapse', ...
        ...'nerve', ...
        ...'replications', ...
        ...'ant_postprocess', ...
        };
else
    do_recalculate = args.do_recalculate;
end

% default action for plot is FALSE
if isempty(args.do_plot)
    do_plot = { ...
        ...'mech', ...
        'oc_mna', ...
        ...'ant', ...
        ...'synapse', ...
        'synapse_avg', ...
        ...'nerve', ...
        ...'ant_postprocess' ...
        };
else
    do_plot = args.do_plot;
end

% update in runopt
runopt.update_struct('do', skip_do, false);
runopt.update_struct('recalculate', do_recalculate, true);
if canplot()
    runopt.update_struct('plot', do_plot, true);
end

if args.recalculate == true
    runopt.update_struct('recalculate', {'synapse'}, true);
end

%% Plotting options
plotopt = plotOpt('LCRB', ...
    ...
    'default_plt_action', false, ...
    ...
    'JoinReplications', false, ...
    ...
    'subsamplingFactor', 1, ... 10
    'subsamplingFactorFilt', 1, ... 50
    'subsamplingFactorStores', 1, ... 50
    'movingAverageWindowLength', Time(10, 'ms'), ...
    'tspan', [topt.total.t0, topt.total.tf] ...
    ...'tspan', [Time(0, 'ms'), Time(100, 'ms')] ...
    );

% default action for plotopt.do is FALSE
do_draw = { ...
    'Channels', ...
    'Vars1', ...
    'Vars2', ...
    'Stores', ...
    'Cleft', ...
    'CleftNerve', ...
    ...
    'nerve_maximal_crossection', ...
    'nerve_voltage_mesh', ...
    ...
    ...'MNAsettings' ...
    ...
    ...'FourierTransform', ...
    ...'MaximalCrossection', ...
    ...
    ...'CurrentMesh', ...
    ...'VoltageMesh', ...
    ...
    ...'CurrentSteadyState', ...
    ...'VoltageSteadyState', ...
    ...
    ...'VoltageMesh_HC', ...
    ...'VoltageSteadyState_HC', ...
    ...
    ...'BMdispl', ...
    ...'BMdisplProfile', ...
    ...'TMdispl', ...
    ...'TMdisplProfile', ...
    ...
    ...'stimulus', ...
    };

% update in plotopt
plotopt.update_struct('do', do_draw, true);

plotopt.hide_figures_while_plotting();


%%
% SRS = {'H19a', 'M19a', 'L19b'};
% SRS = {'H19a', 'H19b', 'H19c'};
SRS = args.SRS;

ANTSamplingFrequency = 0.5 * args.GlobalSamplingFrequency;
HHSamplingFrequency = max(Frequency(100, 'kHz'), args.GlobalSamplingFrequency);

antopt = antOpt( ...
    'NumDiv', 1, ...
    'save_method', 'matlab_matfile', ...
    'script', 'ANT', ...
    ...
    ...'ant', 'eguia', ...
    ...'ant', 'meddis', ...
    ...'ant', 'sumner', ...
    ...'ant', 'sumnerStochastic', ...
    ...'ant', 'dev', ...
    ...'ant', 'dev_stochastic', ...
    ...'ant', 'v3', ...
    'ant', 'v4', ...
    ...
    'fiber', {{'regular_HSR_v1'}}, ...
    ...
    'plotSynapseSimulation', 'all', ... % false, index vector (e.g. 1:3) or 'all'
    'plotSynapseVarsAreIdentical', true, ...
    ...
    'samplingFrequency', ANTSamplingFrequency, ... sampling frequency of the Synapse result & Nerve input and result
    ...
    ...'force_quick_onset', true', ...
    ...
    ... % ! needs to be two "cell" {} brackets as struct function "removes one" to extend dimensions !!!
    ...
    'slices', {{round(linspace(1,mnaopt.Numstacks,100))}}, ...
    ...'slices', {{'all'}}, ... % all slices
    ...'slices', {{'max'}}, ... % slice with maximal Curr.IHC value
    ...'slices', {{'max+',3}}, ... % max-slice + right Neighbourhood
    ...'slices', {{'max-',3}}, ... % max-slice + left Neighbourhood
    ...'slices', {{'max+-',100}}, ... % max-slice + Neighbourhood
    ...'slices', {{25:75}}, ... % multiple slices direct selection
    ...'slices', {{256}}, ... % direct slice selection
    ...'slices', {{'max_std'}}, ...
    ...'slices', {{'max_std_new'}}, ...
    ...'slices', {{100}}, ...
    ...
    'VoltageAmplitudeFactor', 1, ...
    'VoltageAmplitudeAddFactor', 0, ...
    'IgnoreNTRateThreshold', false, ...
    ...
    'numberOfRepetitions', args.num_replicas ...
    );

if ~isempty(args.slices)
    antopt.slices = args.slices;
end

hhopt = hhOpt( ...
    'NumDiv', 1, ...
    'save_method', 'matlab_matfile', ...
    'method', args.hh_method, ...
    ...'method', 'hhnint', ...  % deterministic HH
    ...'method', 'hhfloor', ...  % deterministic HH
    ...'method', 'fxnint', ...  % stochastic HH - Fox algorithm
    ...'method', 'cw', ...      % stochastic HH - Chow&White algorithm
    ...
    'script', 'ANT', ...
    ...
    'plotNerveSimulation', false, ... % false, index vector (e.g. 1:3) or 'all'
    ...
    'samplingFrequency', HHSamplingFrequency, ... sampling frequency of the Synapse result & Nerve input and result
    ...
    'scaleFactor', 2*1e-5 ...3*1e-5 ... % sumnerstoch
    ...'scaleFactor', v2struct(1e-4, 1e-4, 1e-4, fieldNames) ... % sumnerstoch
    );

%% ADD

% !!! NEED TO FIGURE THIS OUT !!!
% switch stimulus.type
%     case 'gen'
%         stimulus = stimulusOpt( stimulus, 'shapeParameter', stimulus.frequency / 10 );
%         runopt = runOpt(runopt, ...
%             'analysisStart', stimulus.zeroTime + stimulus.shapeParameter / stimulus.frequency );
%     case 'var'
%         runopt = runOpt(runopt, ...
%             'analysisStart', stimulus.zeroTime );
% end

%%

% for i = 1:length(stimulus)
%     stimulus(i).eval();
%     figure
%     plot(stimulus(i), ...
%         'plotAudio', false, ...
%         'plotAcceleration', false, ...
%         'plotSpectrogram', true ...
%         )
% %     play(stimulus(i))
% end

% ylim([0,10])

%%

if false %isa(stimulus, 'ZeroSignal')
    xpos = 0.5;
    EXTRA_OPTS = { ...
        'xpos', xpos, ...
        'init_flag', true, ...
        };    
else
    EXTRA_OPTS = {};
end

if ~isempty(args.postprocess_windows_plot)
    EXTRA_OPTS = [ EXTRA_OPTS, ...
        {'postprocess_windows_plot', args.postprocess_windows_plot}];
end

%% Run similation

switch args.ant_fun
    case 'ANT'        
        FUN = @ANT;
    case 'ANT_single'
        FUN = @ANT_single;
    case 'ANT_clamp'
        FUN = @ANT_clamp;
    otherwise
        error('Unknown option %s', args.ant_fun)
end

if (paropt.licenceAvailable == 1) && ...
   (paropt.useparalleltoolbox && paropt.submitAsBatchJob)

    % submit ANT as batch job
    batch(FUN, 0, {stimulus, mechopt, mnaopt, antopt, hhopt, runopt, opt, plotopt, memopt, paropt}, ...
        'AdditionalPaths', CochleaNervePath( opt.cochleadir ));

else
    % run ANT function
    for i = 1:numel(args.fiber_properties)

        if regexp(args.fiber_properties{i}.SR, 'ring_variable_(\d+)')
            antopt.transductionopt = transductionOpt_v4_1(antopt.ant, args.fiber_properties{i});
            antopt.fiber = antopt.transductionopt.SR;

        else
            antopt.transductionopt = transductionOpt_v4(antopt.ant, args.fiber_properties{i}.SR);
            antopt.fiber = antopt.transductionopt.SR;
        end

        SIM_OPTS = { ...
            copy(stimulus), ...
            copy(topt), ...
            copy(midopt), ...
            copy(mechopt), ...
            copy(mnaopt), ...
            copy(antopt), ...
            copy(hhopt), ...
            copy(runopt), ...
            copy(opt), ...            
            copy(memopt), ...
            copy(paropt) ...
            };

        [statistics, results, runopt_new] = FUN(SIM_OPTS{:}, copy(plotopt), EXTRA_OPTS{:});
        
    end
    if false %runopt.plot.oc_mna
%         plotopt = plotOpt('MNA', ...
%             'MaximalCrossection', false, ...
%             'CurrentMesh', true, ...
%             'FourierTransform', false, ...
%             'plotBM', true, ...
%             'subplot', true);

        plotopt.interactive_selection = true;

        oc_mna_plot( plotopt, stimulus, topt, midopt, mechopt, mnaopt, antopt, hhopt, runopt_new, opt, memopt, paropt, results);
    end

end
